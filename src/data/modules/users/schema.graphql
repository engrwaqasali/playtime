scalar URL

schema {
    query: Query
}

type Query {
    me: User
    user(userId: ID!): User
    fairPlay: FairPlayPayload!
    usersTotal: Int!
}

type Mutation {
    updateClientSeed(clientSeed: String): String!
    updateServerSeed: UpdateServerSeedPayload!
}

type Subscription {
    balance: BalanceSubscription
}

enum UserRole {
    Default
    Moderator
    Admin
}

type User {
    id: ID!
    role: UserRole!
    username: String!
    avatar: URL!
    money: Float
}

type FairPlayPayload {
    clientSeed: String!
    serverSeedHash: String!
    nonce: Int!
}

type UpdateServerSeedPayload {
    oldServerSeed: String!
    newServerSeedHash: String!
}

type BalanceSubscription {
    money: Float!
    maxReached: Boolean!
}
